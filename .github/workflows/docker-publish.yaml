name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: sptest

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: hadolint
        uses: burdzwastaken/hadolint-action@master

      - name: Build the Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: docker build . --file Dockerfile --target tester --tag faruryo/sptest-tester

      - name: pytest and cov-report
        run: docker run -v /tmp:/tmp faruryo/sptest-tester pytest -s --cov=sptest --cov-report=xml:/tmp/coverage.xml

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDDHHmmss

      - name: Get short sha
        id: short-sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build image
        env:
          DOCKER_BUILDKIT: 1
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        env:
          DATETIME: "${{ steps.current-time.outputs.formattedTime }}"
          SHORT_SHA: "${{ steps.short-sha.outputs.sha_short }}"
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$DATETIME$SHORT_SHA
          docker push $IMAGE_ID:$DATETIME$SHORT_SHA
